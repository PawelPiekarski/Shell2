/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shell2;

import java.awt.Color;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

/**
 *
 * @author użytkownik1
 */
public class ShellFrame extends javax.swing.JFrame {

     String path;
     String prompt;

    /**
     * Creates new form ShellFrame
     */
    public ShellFrame() {
        initComponents();
        prompt="$>";
         PoleTekstowe.setSize(this.getSize());
        path=System.getProperty("user.dir");
        PoleTekstowe.poczatekPolecenia=prompt.length();
        setTitle("Shell command");
        PoleTekstowe.setBackground(Color.black);
        PoleTekstowe.setForeground(new Color(0,255,51));
        PoleTekstowe.setAutoscrolls(true);
        PoleTekstowe.setLineWrap(true);
        PoleTekstowe.append(prompt);
        PoleTekstowe.setCaretPosition(PoleTekstowe.poczatekPolecenia);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        PoleTekstowe = new shell2.MyTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        PoleTekstowe.setColumns(20);
        PoleTekstowe.setRows(5);
        PoleTekstowe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PoleTekstoweKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PoleTekstoweKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(PoleTekstowe);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        PoleTekstowe.setSize(this.getSize());       
    }//GEN-LAST:event_formPropertyChange

    //funkcja aktywowana po zwolnieniu przycisku
    private void PoleTekstoweKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PoleTekstoweKeyReleased
        // TODO add your handling code here:
         String polecenie;
        
         //kod klawisza 8 oznacza przycisk Backspace
         if(evt.getKeyCode()==8 && PoleTekstowe.getCaretPosition()<PoleTekstowe.poczatekPolecenia)
         {
             PoleTekstowe.append(">");
         }
        if(evt.getKeyCode()==10) //kod klawisza 10 oznacza enter
        {
            polecenie=PoleTekstowe.zczytaniePolecenia();

             
              //wykonanie polecenia
            wykonajPolecenie(polecenie);
            
            //przestawienie kursora na koniec
             PoleTekstowe.append(prompt);
             PoleTekstowe.poczatekPolecenia=PoleTekstowe.getText().length();
             PoleTekstowe.setCaretPosition(PoleTekstowe.poczatekPolecenia);
           
        }
    }//GEN-LAST:event_PoleTekstoweKeyReleased
    
    //funkcja aktywowana przy naciśnięciu przycisku
    private void PoleTekstoweKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PoleTekstoweKeyPressed
        
        if(evt.getKeyCode()==10)
        {
            PoleTekstowe.setCaretPosition(PoleTekstowe.getText().length());
            
        }
    }//GEN-LAST:event_PoleTekstoweKeyPressed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShellFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShellFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShellFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShellFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShellFrame().setVisible(true);
            }
        });
    }

//funkcja odpowiedzialna za rozpoznanie polecenia
    void wykonajPolecenie(String polecenie)
    {
        String argument;
       if(polecenie.regionMatches(0, "prompt ", 0, 7))
       {
           argument=polecenie.substring(7);
           promptAkcja(argument);
           System.out.println(argument);
        }
       else if(polecenie.regionMatches(0,"cd ",0,3))
       {
           argument=polecenie.substring(3);
           cdAkcja(argument);
       }
       else if(polecenie.regionMatches(0,"exit\n",0,5))
       {
           System.exit(0);
       }
       else if(polecenie.regionMatches(0,"dir\n",0,4))
       {
           dirAkcja();
       }
       else if(polecenie.regionMatches(0,"tree\n",0,5))
       {
           treeAkcja();
       }
        else
       {
           zlePolecenie(polecenie); 
       }
    }

    //wykonanie komendy tree
    void treeAkcja()
    {
        PoleTekstowe.append(path+"\n");
        tree(path,1); 
    }
    
    //funkcja rekurencyjna tworząca drzewo
    void tree(String PATH, int k)
    {
        File dir=new File(PATH);
        File[] listaPlikow=dir.listFiles();
        
        for(File plik:listaPlikow)
        {
            if(plik.isDirectory())
            {
                for(int i=1;i<=k;i++)
                {
                PoleTekstowe.append("-");
                }
                PoleTekstowe.append(plik.getName()+"\n");
                tree(PATH+"\\"+plik.getName(),k+1);
            }
            
        }
    }
    
    //wykonanie komendy cd
    void cdAkcja(String argument)
    {
        if(argument.equals("..\n"))
        {
            if(prompt.equals(path+">"))
            {
            path=path.substring(0, path.lastIndexOf("\\"));
            PoleTekstowe.append(path+"\n");
            prompt=path+">";
            }
            else
            {
            path=path.substring(0, path.lastIndexOf("\\"));
            PoleTekstowe.append(path+"\n");
            }
            
        }
        else
        {
            String pathtmp;
            pathtmp=path+"\\"+argument.substring(0);
            
            if(pathtmp.endsWith("\n"))
            {
                pathtmp=pathtmp.substring(0, pathtmp.indexOf("\n"));
            }
            //sprawdzenie czy wpisany folder istnieje
            if(Files.exists(Paths.get(pathtmp)))
            {
               if(prompt.equals(path+">"))
                {
                    path=pathtmp;
                    prompt=path+">";
                }
                else
                {
                    path=pathtmp;
                }
            }
            else
            {
                PoleTekstowe.append("Folder nie istnieje\n");
            }
            
        }
    }
    
    //wykonanie komendy dir
    void dirAkcja()
    {
        File dir=new File(path);
        
        File[] listaPlikow=dir.listFiles();
        
        for(File plik:listaPlikow)
        {
            if(plik.isDirectory())
            {
                PoleTekstowe.append("DIR   "+plik.getName()+"\n");
            }
            else if(plik.isFile())
            {
                PoleTekstowe.append("FILE  "+plik.getName()+"\n");
            }
        }
    }
    
    //wykonanie komendy prompt
    void promptAkcja(String argument)
    {
         if(argument.equals("$cwd\n"))
           {
               prompt=path+">";
           }
           else if(argument.equals("reset\n"))
           {
               prompt="$>";
           }
           else
           {
         argument=argument.substring(0, argument.indexOf("\n"));
           prompt=argument+">";
           }
    }
    
    //wykonanie przypadku błędnego polecenia
    void zlePolecenie(String polecenie)
    {
        if(polecenie.contains(" "))
           {
               int spacja=polecenie.indexOf(" ");
               PoleTekstowe.append(polecenie.substring(0, spacja)+" : unknown command\n");
           }
           else
           {
               PoleTekstowe.append(polecenie.substring(0, polecenie.length()-1)+" : unknown command\n");
           }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private shell2.MyTextArea PoleTekstowe;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
